a#!/bin/bash
# -------------------------
# Author: Aiswerya and Muzna
# Date: 06/06/2023
# Topic: Working with Linux Commands
# Usage:
# ------------------------
# Script Body
echo "Welcome to learn about Working with Linux Commands"
sleep 5

# Author: Aiswerya and Muzna

echo " In Bash shell, a space is a separator. Quotation marks (“ ”) override the Bash interpretation of an argument with a space as two separate arguments"
echo "Today is $(date)"
echo “$SHELL”
sleep 5
#You can’t use double quotation within another double  quotation to assign any string value. If you want to print double quotes in the output then you have to use the backslash (\) with the string.

$ echo "The price is \"500\""                        
Output: The price is "500"

#you can print backticks (`) and backslash(\) characters in the output by using the backslash(\) within the double quotation
$ echo “Today is `date`”                 #double quotation mark will print the output and `date` will print today’s date          
Output: Today is Mon Jun 5

$ echo “ \\PHP\\ is a programming language”
Output: \PHP\ is a programming language


echo "Bash metacharacters are special characters that have meaning to the shell & users can use them to work faster & more powerful interaction with Bash. Metacharacters are powerful tools to control output, wild cards & chaining commands"

# ‘*’ (asterisk)  #matches any number of characters
# ‘?’ (question mark)  #matches a single character
# [ ] (square brackets) #matches any single character within the specified range or set

#echo ls *.txt 
Output: list all files with a .txt extension in the current directory

‘>’ (greater than): #redirects command output to a file, overwriting the file if it exists
‘>>’ (double greater than) #redirects command output to a file, appending it to the file if it exists
‘<’ (less than) #redirects input from a file
# ls > files.txt will redirect the output of the ls command to a file named files.txt

‘|’ (pipe) #connects the output of one command to the input of another command, allowing for command chaining and data manipulation

#ls | grep 'example'
Output:  list files in the current directory and then filter the output to show only the ones containing the word 'example'

‘$’( ) (dollar sign followed by parentheses) #executes the command within the parentheses and substitutes the output into the command line.
#echo "Today is $(date)" 
Output: the current date 

‘\’ (backslash) #escapes the special meaning of the following character, treating it as a literal character.
#echo "This is a \$10 bill" 
Output: "This is a $10 bill" 

sleep 5

Authors: Wahaj, Nastaran
echo "<, >, |, >>, 2>, 2>> are common operators that are used for redirection. By default, the >  output redirector overwrites existing file content with no warning"

echo “The purpose of redirector operators is to allow you to redirect the output from multiple commands to a single file”
echo “< redirection, cat command will take the input from “filename” and print it to the terminal screen”
echo “>  will write after running this command, will be redirected and copied to the “file.txt”. This is standard output redirection. ”
Echo “| in Linux, a pipeline is a mechanism that allows two or more processes to be combined or executed concurrently.”
echo  “2> this operator redirects the errors that are generated by a command to a file.” 
echo “ >> With the help of this Redirection, you can append the output to the file without compromising the existing data of the file.”



cat < file.txtname
cat> file.txt
cat < /etc/passwd
ls -l /etc | less
Stderrcommand 2>error.txt
cat >> file.txt
ls history.txt | touch file_example_1 

sleep 5

echo "The output of one command can be sent to another command by using a pipe (|)"
echo “The purpose of the pipe command is to enable seamless flow of data between commands, facilitating data processing, filtering and analysis.”
echo “ | = the pipe command can be executed by using the symbol between two commands that provide an output or process an input
echo” the output of the command to the left of the pipe symbol is redirected as input into another command to the right of the pipe symbol”

ps aux | grep httpd
echo “in the example above we are trying to find the httpd process in the system process list”
echo “here linux first takes the output from the command ps aux, which lists the currently running processes on the system”
echo “the output from ps aux is redirected as input in to the command grep httpd”
echo “the command grep httpd returns the value of the string ‘httpd’ in the process list from the ps aux command”
sleep 5

cat file.txt | wc -l
echo “in the example above we are trying to get the line count from the file file.txt”
echo “Here linux first takes the output from cat file.txt to display the output of contents of file.txt”
echo “the output from cat file.txt is redirected as input to the command wc -l”
echo “wc -l returns the line count of the contents of the output in cat file.txt command”
sleep 5




Ardo
echo " The tee command reads the standard input (stdin) and writes the data to both to the standard output & files."

sleep 5
[userA@server00 -I$ hostname | tee filel. txt server00
[userA@server0e -J$ cat filel. txt
sleep 5
echo "Hello, Ardo!" | tee greeting.txt









Author: Anmoljot, Heera
echo "Command substitution is useful in nested command lines when writing Bash Script. Backtick (`) & $(command) can be use as command substitution"
nano demo.sh  #creates a file called demo

#enter this code in the demo.sh file
#!/bin/bash
num=100
echo -e "num: $num"

number=200
echo -e "number: `number`"
#save and exit the file

[ec2-user@ip-10-0-10-142 ~]$ bash demo.sh    #runs the file
num: 100
demo.sh: line 8: number: command not found
number:

sleep 5

Authors: M Shah, Shaba
echo " semicolon (;) is used to chain commands"
sleep 5
Example 1
echo "You are here: "; pwd
Example 2
[ec2-user@ip-10-0-10-66 ~]$ touch AWSrestart.txt ; echo "Zeki is the Best AWS teacher" > AWSrestart.txt
[ec2-user@ip-10-0-10-66 ~]$ ls
AWSrestart.txt  companyA
[ec2-user@ip-10-0-10-66 ~]$ cat AWSrestart.txt
Zeki is the Best AWS teacher



Authors: Abdinasir,Aladin 
echo "grep command is used to search text & strings in a given file"
sleep 5
echo Let's say we have a file named "contacts.txt" that contains a list of contacts with their names and phone numbers:

yaml
John Doe: 123-456-7890 Jane Smith: 987-654-3210 Alex Johnson: 555-123-4567

echo To search for all the contacts whose names contain the word "John", you can use the following command:

bash

grep "John" contacts.txt

echo The output of this command will be:

yaml

John Doe: 123-456-7890






Author: Zaid, Zeki -R9
echo "The cut command pulls relevant information out of the text files & displays that information to the user. Cut command requires the user to specify bytes,fields or characters to extract. "
sleep 5
echo “Cut command options include: bytes (-b), character (-c), field (-f), and delimiter (-d)” 
cut -d ‘,’ -f 1 names.csv # Extracts the first field of each record with the comma (,) as the separator
cut -c 1-2 names.csv # Extracts the first two characters of each line
cut -b 1-5 names.csv # Extracts the first five bytes of each line.
cut -c 1,6,7 names.csv # Extracts the characters 1, 6, and 7 of each record
cut -c 4- names.csv # Extracts from characters 4 to the end.
cut -c -3 names.csv # Extracts from the first character to the third.




Author: Joe and Hang
echo "The sed command is a non-interactive text editor which edits based on the rules
that are provided "
sleep 5
sed ‘s/page/website/’ content.txt # Replaces the first occurrence of page with website in the content.txt file..

sed ‘s/page/website/n’ content.txt #Replaces page occurrences with website in the content.txt file, the /n replaces the nth occurrence, example /8 replaces the 8th occurrence.

sed ‘n s/page/website/’ content.txt # Replaces the page with website only on the nth line of text

sed ‘s/page/website/g’ content.txt #Replaces page occurrences with website in the content.txt file, the /g replaces all occurrences. 

Author: Ayo, Ifunanya
echo "The sort command sort file content in specified order such as alphabetical, reverse order,number or month "
Echo “There are multiplemutliple commands that help sort your list”
Sleep 5
“sort file.txt” #outputs line in alphabetical order.
“sort -o” #outputs the result to a file.
“sort -r file.txt” #outputs line in reverse alphabetical order.”
“sort -u file.txt” #removes duplicate entries (useful for log files)
“sort -M file.txt” #ouputs line in order of month.
“sort -n file.txt” #sorts numerically if the file contains numbers.
“sort -k” #sort according to the kth column (if the file is formatted as a table”.
“sort -o” #checks if a file is already sorted.
sleep 5
Echo “create a nano filename.txt”
Echo “in the nano file add” # echo “Name”
Echo “To run in main file and to double check all your variable are there” # cat file.txt
Echo “file can now be sorted in whichever way  author wants to sort” # sort -u filename.txt file isecho 

In the na

echo " awk command is used to write small programs to transform data. "
sleep 5
Echo “awk is a scripting command used to manipulate and generategenrate reports”
Echo “it required no compilingcompling and allows user to defines variables, uses string and arithmeticarthimetic operators, uses control flow and loops, generate, formatted reports”
sleep 5
Echo “Awk is mostly used for pattern scanning and processing.”
Sleep 5
Echo “it searches one or more files to see if they contain lines that matches with the specifiedspectified patterns and then perform the associated actions”
Sleep 5
Echo “ there are 2 ways to invoke awk- explicitexplict program and program in a file”
#awk options -f program-files input-file
# awk -f , program-file input-file
#awk option ‘program’ input-files
Echo “ the -F” #fs to specify a fieldfiled seperator (the default separatorseperator any number of spacesspcaes or tab)”
Sleep 5
Echo “ the -f” # source -files to specify a file that containscoains awk script”
Sleep 5
Echo “-v” # var=value to declare a variable” 
Sleep 5
Echo “the name awk comes from the name of the 3 developers :Aho, Weinberger, and Kernighan”
Sleep 5 
Echo “awk is used as follows: awk options ‘program’ inputFile”
Sleep 5

#Create a file to practice the different awk commands using the following syntax:
[ec2-user@ ~]$ cat > test.csv
Factory, 1, Paris
Store, 2, Dubai
Factory, 3, Brasilia
Store, 4, Algiers
Factory, 5, Tokyo

#When you are done, press CTRL+D to exit the file.To verify that the test.csv file has 
been created, enter ls and press Enter 

#program can be in the form {action}
“awk -F, ‘{print$3}’ test.csv” #the Field separator is the comma #this program is to print the third
field on each record in the test.csv file

#program can be in the form of select_record_or_field {action}. The program can use a regular
expression to match records or rules against specific rules.
“awk -F, ‘$2 < 5 {print$3}’ test.csv” #selects only records for which the third field is less than 5.

Echo “awk can use a special pattern to perform actions before and after records are processed”
Sleep 5
“awk ‘BEGIN { print “Start Processing.” } ; { print $1 }; END { print “Done ! :]” }’ test.csv” #this
program prints Start Processing, then displays the first field of each record, and finally displays
Done!



 




